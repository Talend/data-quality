#!/usr/bin/groovy

def AWS_POD_LABEL = "TDQ-VERACODE-${UUID.randomUUID().toString()}"
def scanResultPath = 'scan-result.json'
def vulnerabilitiesListPath = 'vulnerabilities.json'
def reportJobStatePath = 'report-job-state.txt'
def reportScriptPath = 'ci/vulnerability-check/vulnerabilities-report.js'
def decodedJobName = env.JOB_NAME.replaceAll('%2F', '/')
def slackChannel = 'tdq_ci'

enum JobState {
    STARTED('#0000AA'), FAILURE('#AA0000'), PARTIAL_FAILURE('#ff9900'), SUCCESSFUL('#00AA00')

    JobState(String color) {
        this.color = color
    }

    public final String color

    def getMessage(env, decodedJobName) {
        return "${this.name()}: Vulnerability check `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }


    def getMessageWithSecurityReport(env, decodedJobName, report, scanResultUrl) {
        String scanResultLinkMessage = "<${scanResultUrl}|Full scan result>"

        return "${this.name()}: Vulnerability check `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\n" +
                scanResultLinkMessage + "\n" +
                report
    }
}

pipeline {
    agent {
        kubernetes {
            label AWS_POD_LABEL
            yaml """
                apiVersion: v1
                kind: Pod
                spec:
                  imagePullSecrets:
                  - name: talend-registry
                  containers:
                  - name: talend-tdq-vulnerability-container
                    image: artifactory.datapwn.com/tlnd-docker-dev/talend/common/tsbi/jdk8-builder-base:1.16.0-20200106163950
                    tty: true
                    command:
                    - cat
                    volumeMounts:
                    - name: m2
                      mountPath: /root/.m2/repository
                  volumes:
                  - name: m2
                    hostPath:
                      path: /tmp/jenkins/tsbi/m2
          """
        }
    }

    triggers {
        cron(BRANCH_NAME == "master" ? "0 13 * * 0" : "")
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timeout(time: 90, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    stages {
        stage('Scan 3rd parties vulnerabilities') {
          steps {
            container('talend-tdq-vulnerability-container') {
              withCredentials([string(credentialsId: 'veracode-token', variable: 'SRCCLR_API_TOKEN')]) {
                sh """#!/bin/bash
                    curl -sSL https://download.sourceclear.com/ci.sh | SRCCLR_API_TOKEN=${SRCCLR_API_TOKEN} DEBUG=1 sh -s -- scan --allow-dirty --recursive > ${
                        scanResultPath
                    }
                """
              }
            }
          }
        }

        stage('Process scan result') {
            steps {
                echo 'Build simple report & send slack notification'
                container('talend-tdq-vulnerability-container') {
                    script {
                        SCAN_RESULT_URL = sh(
                                script: "jq --raw-output '.records[0].metadata.report' ${scanResultPath}",
                                returnStdout: true
                        ).trim()
                        SCAN_REPORT = sh(
                                script: "node ${reportScriptPath} ${scanResultPath} ${vulnerabilitiesListPath} ${reportJobStatePath}",
                                returnStdout: true
                        ).trim()
                        echo "Vulnerability scan result: ${SCAN_REPORT}"
                        echo "Scan result URL: ${SCAN_RESULT_URL}"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                reportJobStateString = readFile "${reportJobStatePath}"
                if (reportJobStateString == 'SUCCESSFUL') {
                    jobState = JobState.SUCCESSFUL
                } else if (reportJobStateString == 'PARTIAL_FAILURE') {
                    jobState = JobState.PARTIAL_FAILURE
                } else if (reportJobStateString == 'FAILURE') {
                    jobState = JobState.FAILURE
                } else {
                    echo "Something went wrong, couldn't retrieve the jobsSate from the report job output: " + reportJobStateString
                    jobState = JobState.FAILURE
                }
                slackSend(
                        color: jobState.color,
                        channel: slackChannel,
                        message: jobState.getMessageWithSecurityReport(env, decodedJobName, SCAN_REPORT, SCAN_RESULT_URL))
            }
        }
        failure {
            script {
                slackSend(
                        color: JobState.FAILURE.color,
                        channel: slackChannel,
                        message: JobState.FAILURE.getMessage(env, decodedJobName))
            }
        }
    }
}