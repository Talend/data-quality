const fs = require('fs');

const [ scanResultPath, vulnerabilitiesListPath, reportJobStatePath ] = process.argv.splice(2);
const scanResult = JSON.parse(fs.readFileSync(scanResultPath, 'utf-8'));
const vulnerabilitiesList = scanResult.records[ 0 ].vulnerabilities;
vulnerabilitiesList.sort((vuln1, vuln2) => vuln2.cvssScore - vuln1.cvssScore);
// Export the vulnerabilities list
fs.writeFileSync(vulnerabilitiesListPath, JSON.stringify(vulnerabilitiesList, null, 2));

const report = vulnerabilitiesList.reduce(
  (seed, vulnerability) => {
    if (vulnerability.cvssScore >= 9) {
      return { ...seed, criticalVulnerabilitiesNumber: seed.criticalVulnerabilitiesNumber + 1 };
    }
    if (vulnerability.cvssScore >= 7) {
      return { ...seed, highVulnerabilitiesNumber: seed.highVulnerabilitiesNumber + 1 };
    }
    if (vulnerability.cvssScore >= 4) {
      return { ...seed, mediumVulnerabilitiesNumber: seed.mediumVulnerabilitiesNumber + 1 };
    }
    return { ...seed, lowVulnerabilitiesNumber: seed.lowVulnerabilitiesNumber + 1 };
  },
  {
    criticalVulnerabilitiesNumber: 0,
    highVulnerabilitiesNumber: 0,
    mediumVulnerabilitiesNumber: 0,
    lowVulnerabilitiesNumber: 0,
  },
);

// SET REPORTING STATE (must corresponds to a JobState declared in the Jenkinsfile)
const getJobState = (vulnerabilityReport) => {
  if (vulnerabilityReport.criticalVulnerabilitiesNumber + vulnerabilityReport.highVulnerabilitiesNumber > 0) {
    return 'FAILURE';
  } else if (vulnerabilityReport.mediumVulnerabilitiesNumber + vulnerabilityReport.lowVulnerabilitiesNumber > 0) {
    return 'PARTIAL_FAILURE';
  }
  return 'SUCCESSFUL';
};

fs.writeFileSync(reportJobStatePath, getJobState(report));


// WRITE REPORT
if (report.highVulnerabilitiesNumber + report.highVulnerabilitiesNumber +
  report.mediumVulnerabilitiesNumber + report.lowVulnerabilitiesNumber > 0) {
  process.stdout.write(`\
Vulnerabilities found:
* Critical: ${report.criticalVulnerabilitiesNumber}
* High:     ${report.highVulnerabilitiesNumber}
* Medium:   ${report.mediumVulnerabilitiesNumber}
* Low:      ${report.lowVulnerabilitiesNumber}
`);
} else {
  process.stdout.write('No vulnerabilities found :)');
}