package org.talend.dataquality.statistics.frequency.pattern;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**
 * This class can convert pattern generated by {@link org.talend.dataquality.statistics.frequency.recognition.TypoUnicodePatternRecognizer} to a regex.
 */
public class TypoUnicodePatternToRegex {

    public String toRegex(String pattern, boolean caseSensitive) {
        StringBuilder sb = new StringBuilder();
        for (String current : splitPattern(pattern)) {
            Optional<TypoUnicodePattern> typoUnicodePattern = TypoUnicodePattern.get(current);
            String regex = typoUnicodePattern.map(it -> caseSensitive ? it.getCaseSensitive() : it.getCaseInsensitive())
                    .orElse(current);
            sb.append(regex);
        }

        return sb.toString();

    }

    private List<String> splitPattern(final String pattern) {
        List<String> result = new ArrayList<>();
        if (pattern.startsWith("[")) {
            int closeBracket = pattern.indexOf(']') + 1;
            int openBracket = pattern.indexOf('[', 1) + 1;
            if (openBracket > 0 && closeBracket > openBracket) {
                char c = pattern.charAt(0);
                if (mustBeEscaped.contains(c)) {
                    result.add("\\" + c);
                } else {
                    result.add(String.valueOf(c));
                }
                if (pattern.length() > 1) {
                    result.addAll(splitPattern(pattern.substring(1)));
                }
            } else {
                String extracted = pattern.substring(0, closeBracket);
                result.add(extracted);
                if (closeBracket < pattern.length()) {
                    result.addAll(splitPattern(pattern.substring(closeBracket)));
                }
            }
        } else {
            char c = pattern.charAt(0);
            if (mustBeEscaped.contains(c)) {
                result.add("\\" + c);
            } else {
                result.add(String.valueOf(c));
            }
            if (pattern.length() > 1) {
                result.addAll(splitPattern(pattern.substring(1)));
            }
        }
        return result;
    }

    private final List<Character> mustBeEscaped = Arrays.asList('(', ')', '[', ']', '.', '?', '+', '*');
}
